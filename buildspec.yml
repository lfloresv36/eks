version: 0.2
phases:
  install:
    runtime-versions:
      python: 3.12
    commands:
      - echo "Instalando dependencias necesarias"
      - curl -L -o terraform.zip https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
      - unzip terraform.zip
      - mv terraform /usr/local/bin/
      - pip install --upgrade awscli
      - curl -sSL https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
      - terraform --version
      - helm version
      - aws eks --version
  pre_build:
    commands:
      - echo "Iniciando Terraform"
      - terraform init
      - terraform apply -auto-approve || { echo "Terraform falló, ejecutando terraform destroy"; terraform destroy -auto-approve; exit 1; }
      - terraform output -raw cluster_name > cluster_name.txt
      - export CLUSTER_NAME=$(cat cluster_name.txt)
      - echo "Cluster Name=$CLUSTER_NAME"
      - export VPC_ID=$(terraform output -raw vpc_id)
      - echo "VPC_ID=${VPC_ID}"
  build:
    commands:
      - echo "Configurando kubectl para EKS"
      - aws eks update-kubeconfig --region us-east-1 --name $CLUSTER_NAME || { echo "Error al configurar kubectl, ejecutando terraform destroy"; terraform destroy -auto-approve; exit 1; }
      - echo "Instalando AWS Load Balancer Controller"
      - helm repo add eks https://aws.github.io/eks-charts
      - helm repo update
      - helm install aws-load-balancer-controller eks/aws-load-balancer-controller --set clusterName=$CLUSTER_NAME --set awsRegion=us-east-1 --set awsVpcID=$VPC_ID --namespace kube-system || { echo "Error en Helm, ejecutando terraform destroy"; terraform destroy -auto-approve; exit 1; }
  post_build:
    commands:
      - echo "Desplegando aplicación"
      - echo "Despliegue completado"
      - echo "Ejecución completada. VPC_ID=${VPC_ID}"
artifacts:
  files:
    - '**/*'
